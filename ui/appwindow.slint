import "./JetBrainsMono-Regular.ttf";
// import { Button } from "std-widgets.slint";
export global theme {
    in property <bool> dark: false;
    in property <string> font: "JetBrains Mono";
    in property <color> axn-button: theme.dark ? #3c3836 : #ebdbb2;
}

export global elements {
    in-out property <bool> unclosed_paren: false;
    callback touch(string);
    in property <string> result: " ";
    in property <string> text: result_state ? "true" : "false"; //"A bit of a dummy text  to appear here";
    in property <string> paren;
    in property <bool> result_state: false;
    callback copy(string);
}

component Hint {
    //in property <string> hint : "/--------------------\\\n| unclosed parenthesis |\n \\----------v---------/ ";
    in property <string> hint: "⚫ unclosed parenthesis ⚫";
    in property <color> color:#d65d0e;
    in property <duration> delay: 0ms;

    box := Rectangle {
        drop-shadow-blur: root.opacity == 100% ? 10px : 30px;
        drop-shadow-color: theme.dark ? #1a1919 : #bdae93;
        drop-shadow-offset-y: 5px;
        background: color;

        height: text.font-size + 20px;
        width: text.width + 25px;
        border-radius: 10px;
        // Image {
        //     x : 10px;
        //     y : 6px;
        //     width : 22px;
        //     source: @image-url("./info.png");
        // }
        text := Text {
            font-family: theme.font;
            color: #3c3836;
            font-size: 14px;
            text: hint;
        }

        animate drop-shadow-blur {
            delay: 750ms;
            easing: ease-out;
            duration: 1000ms;
        }
        animate width {
            duration : 250ms;
            easing : ease-out;
        }
    }

    // animate y {
    //     delay: delay;
    //     duration: 1200ms;
    //     easing: ease-out-elastic;
    // }
    animate opacity {
        duration: 100ms;
        delay: 100ms;
    }
}

component Button {
    in-out property <string> text;
    in property <color> bg-color;
    in property <length> font-size: 20px;
    in property <color> font-color: theme.dark ? #fbf1c7 : #282828;
    Rectangle {
        min-width: 20px;
        min-height: 15px;
        num := Text {
            text: text;
            font-size: font-size;
            color: font-color;
            font-family: theme.font;
        }

        drop-shadow-color: self.background.darker(theme.dark ? -10% : 10%);
        background: ta.pressed ? bg-color.darker(theme.dark ? -15% : 15%) : ta.has-hover ? bg-color.darker(theme.dark ? -40% : 20%) : bg-color.darker(theme.dark ? -20% : 0%);
        border-radius: ta.pressed ? 8px : 20px;
        border-width: ta.pressed ? 3px : 1px;
        border-color: ta.pressed ? self.background.darker(theme.dark ? -40% : 40%) : self.background.darker(theme.dark ? -22% : 22%);
        animate background, border_radius { duration: 150ms; }
        animate border-width {
            delay: 500ms;
            duration: 2000ms;
            easing: ease-out-elastic;
        }
        ta := TouchArea {
            clicked => {
                elements.touch(num.text);
            }
        }
    }
}

export component AppWindow inherits Window {

    title: "Calculator";
    icon: @image-url("./calculator.svg");
    easter := TouchArea {
        width: 50px;
        height: 50px;
        x: 0;
        y: 0;
        clicked => {
            theme.dark = !theme.dark
        }
    }

    in-out property <length> big_font: 40px;
    in-out property <length> smol_font: 30px;
    property <length> delta;
    // in-out property <length> scroll_offset_x: root.width - text.width;
    // out property <length> default_scroll_offset_x: root.width - text.width;
    property <length> new_scroll_offset;
    property <duration> delay: 100ms;
    property <duration> duration;
    in-out property <length> scroll_offset_x;
    out property <length> default_scroll_offset_x: root.width - expression.width - 20px;
    // min-height: 400px;
    // min-width: 300px;
    // max-width: 600px;
    // max-height: 800px;
    // preferred-height: 500px;
    // preferred-width: 500px;
    height :  600px;
    width : 400px;
    background: theme.dark ? #282828 : #fbf1c7;
    VerticalLayout {
        alignment: end;
        padding: 5px;
        padding-bottom: 5px;
        rect := Rectangle {
            border-color: root.background;
            border-width: 10px;
            height: root.height * 0.4;
            // Rectangle {
                expression := Text {
                x: root.width - self.width - 20px - scroll_offset_x;
                y: rect.height - self.height - Result.height;
                text: elements.text;
                horizontal-alignment: right;
                font-size: 40px;
                font-family: "JetBrains Mono";
                animate font-size, color {
                    duration: 150ms;
                    easing: ease-out;
                }
                animate x {
                    duration: 150ms;
                    easing: ease-out;
                }
            }

            parenthesus := Text {
                x: root.width - self.width - 20px - scroll_offset_x;
                y: rect.height - self.height - Result.height;
                text: elements.paren;
                horizontal-alignment: right;
                font-size: 40px;
                font-family: "JetBrains Mono";
                color: theme.dark ? (ta.has-hover ? #bc540e : #ff8b2d) : (ta.has-hover ? #ff943c : #d65600);
                visible: true;
                animate font-size, x {
                    duration: 150ms;
                    easing: ease-out;
                }
                animate color, opacity {
                    duration: 100ms;
                    easing: ease-in-out;
                    iteration-count: 3;
                    direction: alternate;
                }
            }
            // }

            // ta := TouchArea { }

            Result := Text {
                x: root.width - self.width - 20px;
                y: parent.height - self.height;
                horizontal-alignment: right;
                text: elements.result;
                font-size: 30px;
                font-family: "JetBrains Mono";
                animate font-size, color {
                    duration: 150ms;
                    easing: ease-out;
                }
            }

            ta := TouchArea {
                //Handle scroll event
                //expression.width < root.width ? expression.x - 50px : 0;
                y: (elements.result_state ? Result.y : expression.y) - 20px;
                height: expression.font-size + 40px;
                width: root.width;
                scroll-event(event) => {
                    new_scroll_offset = scroll_offset_x + event.delta-y / 2;
                    delay = 0ms;
                    duration = 200ms;
                    
                    // Clamp scroll_offset_x to ensure it stays within bounds
                    if (root.width > expression.width) {
                        // If the text fits within the window, keep it aligned to the right
                        reject
                    } else {
                        if (new_scroll_offset > 0) {
                            scroll_offset_x = 0;
                        } else if (new_scroll_offset < root.width - expression.width) {
                            scroll_offset_x = root.width - expression.width - 20px;
                        } else {
                            scroll_offset_x = new_scroll_offset - 10px;
                        }
                    }
                    delay = 0ms;
                    duration = 100ms;
                    accept
                }
                clicked => {
                    copy_hint.color = #b8bb26;
                    copy_hint.hint = "✱ Copied! ✱";
                    copy_timer.running = true;
                    elements.copy(elements.result);
                }
            }
        }
        
            // x : root.width;

        states [
            result_zoom when elements.result_state: {
                Result.font-size: 40px;
                expression.font-size: 30px;
                Result.color: theme.dark ? #fbf1c7 : #282828;
                expression.color: theme.dark ? #d5c4a1 : #504945;
                expression.x: root.width - expression.width - 20px;
                parenthesus.font-size: 30px;
            }
            result_no_zoom when !elements.result_state: {
                Result.font-size: 30px;
                expression.font-size: 40px;
                Result.color: theme.dark ? #d5c4a1 : #504945;
                expression.color: theme.dark ? #fbf1c7 : #282828;
                parenthesus.font-size: 40px;
            }
        ]

                // states [
                //     zoomed_result when elements.result_state: {
                //         text.font-size: 30px;
                //         result.font-size: 40px;
                //     }
                // ]


    Grid := GridLayout {
            padding: 5px;
            padding-bottom: 15px;
            height: root.height * 0.6;
            spacing: 4px;
            Row {
                Button {
                    bg-color: theme.dark ? #ff403d : #cc241d;
                    text: "C";
                    font-color: root.background;
                    colspan: 1;
                }

                Button {
                    text: "()";
                    bg-color: theme.axn-button;
                    colspan: 2;
                }

                Button {
                    bg-color: theme.axn-button;
                    text: "÷";
                    font-size: 25px;
                    col: 3;
                }
            }

            Row {
                Button {
                    bg-color: root.background;
                    text: "7";
                }

                Button {
                    bg-color: root.background;
                    text: "8";
                }

                Button {
                    bg-color: root.background;
                    text: "9";
                }

                Button {
                    bg-color: theme.axn-button;
                    text: "×";
                    font-size: 25px;
                }
            }

            Row {
                Button {
                    bg-color: root.background;
                    text: "4";
                }

                Button {
                    bg-color: root.background;
                    text: "5";
                }

                Button {
                    bg-color: root.background;
                    text: "6";
                }

                Button {
                    bg-color: theme.axn-button;
                    text: "-";
                    font-size: 25px;
                }
            }

            Row {
                Button {
                    bg-color: root.background;
                    text: "1";
                }

                Button {
                    bg-color: root.background;
                    text: "2";
                }

                Button {
                    bg-color: root.background;
                    text: "3";
                }

                Button {
                    bg-color: theme.axn-button;
                    text: "+";
                    font-size: 25px;
                }
            }

            Row {
                Button {
                    bg-color: root.background;
                    text: ".";
                    font-size: 25px;
                }

                Button {
                    text: 0;
                    bg-color: root.background;
                }

                Button {
                    bg-color: theme.axn-button;
                    text: "<";
                    font-size: 25px;
                }

                Button {
                    bg-color: theme.dark ? #af3a03 : #d65d0e;
                    text: "=";
                    font-color: root.background;
                    font-size: 25px;
                }
            }
        }
    }

    Hint { 
        y : elements.unclosed_paren && ta.has-hover && !elements.result_state ? root.height * 0.1 : -50px;

        animate y {
            duration : 500ms;
            easing : ease-in-out-back;
        }
    }

    copy_hint := Hint {
        hint : "Copy Result?";
        y : ta.has-hover && elements.result_state ? root.height * 0.1 : -50px; 
        animate y {
            duration : 500ms;
            easing : ease-in-out-back;
        }
        animate color {
            duration : 250ms;
            easing : ease-out;
        }
    }

    copy_timer := Timer {
        running : false;
        interval : 1000ms;
        property <int> value : 0;
        triggered => {
            if value == 2 {
                copy_hint.color = #d65d0e;
                self.running = false;
                copy_hint.hint = "Copy Result?";
                value = 0;
                return;
            }
            value += 1;
        }
    }
}
